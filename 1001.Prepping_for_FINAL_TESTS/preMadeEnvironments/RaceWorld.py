import numpy as np
from gym.envs.toy_text.frozen_lake import generate_random_map as env_gen_function

#small has a  have horizon view of 8 and 100 steps
#  medium have horizon view of 8 and 150 steps
#large has horizon view of 10 and 200 steps

def small(): #6 x 30
    #min steps 14 == optimal reward of 0.86
    return np.array(
            [
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1,0,0,1,1,3,3,3,3,3,3,3,3,3,3],
            [1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3],
            [1,1,1,1,1,2,2,2,2,2,2,1,1,0,2,1,1,2,2,1,3,3,3,3,3,3,3,3,3,3],
            [0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,3,3,3,3,3,3,3,3,3,3],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],dtype='float')

def medium(): #7 x 42
    #min steps is 21 == 0.86 optimal score
    return  np.array(
            [
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,2,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,0,0,0,0,1,2,2,1,2,2,2,1,3,3,3,3,3,3,3,3,3,3],
            [1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,2,1,1,1,2,2,2,2,1,2,1,1,2,1,1,1,3,3,3,3,3,3,3,3,3,3],
            [1,1,1,1,1,1,2,2,2,2,1,1,2,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,2,2,2,3,3,3,3,3,3,3,3,3,3],
            [0,0,0,0,1,1,1,1,2,2,2,2,1,1,2,2,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3],
            [0,0,0,0,1,0,1,1,2,1,1,2,2,1,0,0,0,0,0,1,1,1,1,1,2,0,0,0,1,1,1,2,3,3,3,3,3,3,3,3,3,3],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ],dtype='float')

def large(): #8 x 68
    #min stpes is 37 so optimal score is 0.815
    return np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0],
    [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,3,3], 
    [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 2, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,3,3], 
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,3,3] ,
    [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,3,3],
    [0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 2, 2, 1, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,3,3], 
    [0, 0, 0, 0, 1, 1, 2, 1, 1, 2, 2, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,3,3],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0]
    ],dtype='float')

